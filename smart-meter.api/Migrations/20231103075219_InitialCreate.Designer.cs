// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using smart_meter.infrasturcture.Persistence.Repositories;

#nullable disable

namespace smart_meter.api.Migrations
{
    [DbContext(typeof(ReadingsDbContext))]
    [Migration("20231103075219_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("smart_meter.domain.models.Reading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("current")
                        .HasColumnType("float");

                    b.Property<double>("power")
                        .HasColumnType("float");

                    b.Property<double>("powerFactor")
                        .HasColumnType("float");

                    b.Property<DateTime>("readingTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("smartMeterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("voltage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("readings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            current = 0.0,
                            power = 0.0,
                            powerFactor = 0.0,
                            readingTime = new DateTime(2023, 11, 3, 9, 52, 18, 924, DateTimeKind.Local).AddTicks(4301),
                            smartMeterId = new Guid("00000000-0000-0000-0000-000000000000"),
                            voltage = 0.0
                        },
                        new
                        {
                            Id = 2,
                            current = 1.0,
                            power = 1.0,
                            powerFactor = 1.0,
                            readingTime = new DateTime(2023, 11, 3, 9, 52, 18, 924, DateTimeKind.Local).AddTicks(4341),
                            smartMeterId = new Guid("00000000-0000-0000-0000-000000000000"),
                            voltage = 1.0
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
